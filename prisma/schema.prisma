generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @unique @default(cuid())

  username String  @unique
  username_history String @default("[]")
  username_changed_at DateTime @default(now())

  password String

  email    String? @unique

  is_admin Boolean @default(false)

  badges String @default("[{\"name\":\"user\",\"text\":\"User\"}]")

  referrer_profile ReferrerProfile?

  upload_key         String               @unique @default(cuid())
  upload_preferences UploaderPreferences?

  images     Image[]
  space_used Int     @default(0)
  max_space  Int     @default(1000000000)

  comments       Comment[]
  image_comments ImageComment[]

  referrals Referral[]

  last_login_at DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  deleted_at  DateTime?
  
  urls URL[]
}

model ReferrerProfile {
  id String @unique @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  referral_code String @unique @default(uuid())

  referral_limit Int @default(5)

  referrals Referral[]
}

model UploaderPreferences {
  id     String @unique @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  embed_title  String @default("{{image.name}}")
  embed_author String @default("Uploaded by {{uploader.name}}")
  embed_colour String @default("#252525")
  urls String @default("[\"jays.pics\"]")
}

model Comment {
  id String @unique @default(cuid())

  commenter_id String
  commenter    User   @relation(fields: [commenter_id], references: [id])

  receiver_id String

  content String

  hidden  Boolean
  flagged Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at    DateTime?
}

model Image {
  id String @unique @default(cuid())

  uploader_id String
  uploader    User   @relation(fields: [uploader_id], references: [id])

  display_name String
  size         Int
  type         String

  comments ImageComment[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at    DateTime?
}

model ImageComment {
  id           String @unique @default(cuid())
  image_id     String
  image        Image  @relation(fields: [image_id], references: [id])
  commenter_id String
  commenter    User   @relation(fields: [commenter_id], references: [id])

  content String

  hidden  Boolean
  flagged Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at    DateTime?
}

model Referral {
  referrer_id String
  referrer    ReferrerProfile @relation(fields: [referred_id], references: [userId], map: "referrer")

  referred_id String @unique
  referred    User   @relation(fields: [referred_id], references: [id])

  created_at DateTime @default(now())
}

model Announcement {
  id         String   @unique @default(cuid())
  content    String
  created_at DateTime @default(now())
}

model Log {
  id         String   @unique @default(cuid())
  message    String
  created_at DateTime @default(now())
}

model URL {
  id         String   @unique @default(cuid())
  donater_id String
  donater User @relation(fields: [donater_id], references: [id])
  url String
  public Boolean
  connected Boolean
}